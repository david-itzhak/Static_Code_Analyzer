type: edu
files:
- name: analyzer/code_analyzer.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: test/test_1.py
  visible: false
  text: |
    print('What\'s your name?') # reading an input
    name = input();
    print(f'Hello, {name}');  # here is an obvious comment: this prints greeting with a name


    very_big_number = 11_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
    print(very_big_number)



    def some_fun():
        print('NO TODO HERE;;')
        pass; # Todo something
  learner_created: false
- name: test/test_2.py
  visible: false
  text: |
    class  Person:
        pass

    class user:

        def __init__(self):
            pass

        @staticmethod
        def _print1():
            print('q')

        @staticmethod
        def Print2():
            print('q')
  learner_created: false
- name: test/this_stage/test_3.py
  visible: false
  text: |
    class Test:
        def __init__(self, alpha, beta=1):
            self.alpha = alpha
            self.beta = beta

        def function(self):
            print(self.alpha)

        def mutable_var(self, s=[]):
            print(s)

        def okey(self, s=None):
            print("okey")
  learner_created: false
- name: test/this_stage/test_4.py
  visible: false
  text: |
    class Test:
        def __init__(self, alpha, Beta=1):
            self.alpha = alpha

        def function(self):
            print(self.alpha)

        def okey(self, s=None):
            print("okey")
  learner_created: false
- name: test/this_stage/test_5.py
  visible: false
  text: |
    class Test:
        def __init__(self, alpha, beta=1):
            Beta = beta

        def function(self):
            print("Beta")

        def okey(self, s=None):
            Variable = s
            print(Variable)
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    import os, re

    TOO_LONG_LINE = 'Too long line is not mentioned. '
    error_code_long = "s001"

    INDENTATION = "Invalid check of indentation. "
    error_code_indention = "s002"

    UNNECESSARY_SEMICOLON = "Your program passed the line with an unnecessary semicolon or has an incorrect format. "
    error_code_semicolon = "s003"

    TWO_SPACES_BEFORE_COMMENT = "The program should warn about the line with less than 2 spaces before a comment. "
    error_code_comments = "s004"

    TODO = "Your program passed the line with TODO comment or has an incorrect format. "
    error_code_todo = "s005"

    TOO_MANY_BLANK_LINES = "Your program didn't warn about more than two blank lines between lines. "
    error_code_blank_lines = "s006"

    error_code_class_def_spaces = "s007"
    SPACES_AFTER_CLASS_FUNC = "Your program should warn about multiple spaces after keyword 'class' and 'def'. "

    error_code_class_name = "s008"
    CLASS_NAME = "The program should warn about incorrect class name. "

    error_code_func_name = "s009"
    FUNC_NAME = "The program passed the function with the name not in snake_case style. "

    error_code_arg_name = "s010"
    ARG_NAME = "Your program should warn about function argument written not in snake_case style. "

    error_code_var_func_name = "s011"
    VAR_FUNC_NAME = "The program omitted warning about incorrect variable name in the function's body. " \
                    "It should be written in the snake_case style. "

    error_code_default_argument_is_mutable = "s012"
    MUTABLE_ARG = "The program didn't warn about mutable function argument. "

    FALSE_ALARM = "False alarm. Your program warned about correct line. "

    cur_dir = os.path.abspath(os.curdir)


    class AnalyzerTest(StageTest):
        def generate(self) -> List[TestCase]:
            return [TestCase(args=[f"test{os.sep}test_1.py"], check_function=self.test_1),
                    TestCase(args=[f"test{os.sep}test_2.py"], check_function=self.test_2),
                    TestCase(args=[f"test{os.sep}this_stage{os.sep}test_3.py"], check_function=self.test_3),
                    TestCase(args=[f"test{os.sep}this_stage{os.sep}test_4.py"], check_function=self.test_4),
                    TestCase(args=[f"test{os.sep}this_stage{os.sep}test_5.py"], check_function=self.test_5),
                    TestCase(args=[cur_dir + f"{os.sep}test{os.sep}this_stage"], check_function=self.test_common)]

        # Stages 1-2 tests
        def test_1(self, output: str, attach):
            file_path = f"test{os.sep}test_1.py"
            output = output.strip().lower().splitlines()

            if len(output) != 9:
                return CheckResult.wrong("A wrong number of warning messages. "
                                         "Your program should warn about nine mistakes in this test case")

            if not (output[0].startswith(f"{file_path}: line 1: s004") or
                    output[7].startswith(f"{file_path}: line 13: s004")):
                return CheckResult.wrong(TWO_SPACES_BEFORE_COMMENT)

            if not (output[1].startswith(f"{file_path}: line 2: s003") or
                    output[3].startswith(f"{file_path}: line 3: s003") or
                    output[6].startswith(f"{file_path}: line 13: s003")):
                return CheckResult.wrong(UNNECESSARY_SEMICOLON)

            if not (output[2].startswith(f"{file_path}: line 3: s001") or
                    output[4].startswith(f"{file_path}: line 6: s001")):
                return CheckResult.wrong(TOO_LONG_LINE)

            if not (output[5].startswith(f"{file_path}: line 11: s006")):
                return CheckResult.wrong(TOO_MANY_BLANK_LINES)

            if not output[8].startswith(f"{file_path}: line 13: s005"):
                return CheckResult.wrong(TODO)

            return CheckResult.correct()

        # Stage 4 tests
        def test_2(self, output: str, attach):
            file_path = f"test{os.sep}test_2.py"
            output = output.strip().lower().splitlines()
            if not output:
                return CheckResult.wrong("It looks like there is no messages from your program.")

            for issue in output:
                if issue.startswith(f"{file_path}: line 6: ") or issue.startswith(f"{file_path}: line 10: "):
                    return CheckResult.wrong(FALSE_ALARM)

            if not len(output) == 3:
                return CheckResult.wrong("A wrong number of warning messages. "
                                         "Your program should warn about three mistakes in this test case")
            if not output[0].startswith(f"{file_path}: line 1: {error_code_class_def_spaces}"):
                return CheckResult.wrong(SPACES_AFTER_CLASS_FUNC)
            if not output[1].startswith(f"{file_path}: line 4: {error_code_class_name}"):
                return CheckResult.wrong(CLASS_NAME)
            if not output[2].startswith(f"{file_path}: line 14: {error_code_func_name}"):
                return CheckResult.wrong(FUNC_NAME)

            return CheckResult.correct()

        # Default variable is mutable test
        def test_3(self, output: str, attach):
            file_path = f"test{os.sep}this_stage{os.sep}test_3.py"
            output = output.strip().lower().splitlines()
            if not output:
                return CheckResult.wrong("It looks like there is no messages from your program.")
            for issue in output:
                if issue.startswith(f"{file_path}: line 1: "):
                    return CheckResult.wrong(FALSE_ALARM)
                if (issue.startswith(f"{file_path}: line 2: {error_code_default_argument_is_mutable}") or
                        issue.startswith(f"{file_path}: line 6: {error_code_default_argument_is_mutable}") or
                        issue.startswith(f"{file_path}: line 12: {error_code_default_argument_is_mutable}")):
                    return CheckResult.wrong(FALSE_ALARM + "The program pointed correct function arguments as mutable.")

            if not len(output) == 1:
                return CheckResult.wrong("A wrong number of warning messages. "
                                         "Your program should warn about one mistake in this test case")

            if not output[0].startswith(f"{file_path}: line 9: {error_code_default_argument_is_mutable}"):
                return CheckResult.wrong(MUTABLE_ARG)

            return CheckResult.correct()

        # Argument name test
        def test_4(self, output, attach):
            file_path = f"test{os.sep}this_stage{os.sep}test_4.py"
            output = output.strip().lower().splitlines()

            if not output:
                return CheckResult.wrong("It looks like there is no messages from your program.")

            for issue in output:
                if issue.startswith(f"{file_path}: line 1: "):
                    return CheckResult.wrong(FALSE_ALARM)
                if issue.startswith(f"{file_path}: line 6: {error_code_arg_name}"):
                    return CheckResult.wrong(FALSE_ALARM)
                if issue.startswith(f"{file_path}: line 9: {error_code_arg_name}"):
                    return CheckResult.wrong(FALSE_ALARM + "Default value of argument was None.")

            if not len(output) == 1:
                return CheckResult.wrong("A wrong number of warning messages. "
                                         "Your program should warn about one mistake in this test case")

            if not output[0].startswith(f"{file_path}: line 2: {error_code_arg_name}"):
                return CheckResult.wrong(ARG_NAME)

            return CheckResult.correct()

        # Variable name test
        def test_5(self, output, attach):
            file_path = f"test{os.sep}this_stage{os.sep}test_5.py"
            output = output.strip().lower().splitlines()
            if len(output) < 1:
                return CheckResult.wrong("It looks like there is no messages from your program.")

            for issue in output:
                if issue.startswith(f"{file_path}: line 1: "):
                    return CheckResult.wrong(FALSE_ALARM)
                if issue.startswith(f"{file_path}: line 6: {error_code_var_func_name}"):
                    return CheckResult.wrong(FALSE_ALARM + "It was a part of the string - not a variable. ")
                if issue.startswith(f"{file_path}: line 8: {error_code_var_func_name}"):
                    return CheckResult.wrong(FALSE_ALARM + "The None keyword starts with a capital letter. ")

            if not len(output) == 2:
                return CheckResult.wrong("Incorrect number of warning messages. "
                                         "Your program should warn about two mistakes in this test case.")
            for i, j in enumerate([3, 9]):
                if not output[i].startswith(f"{file_path}: line {j}: {error_code_var_func_name}"):
                    return CheckResult.wrong(VAR_FUNC_NAME)

            return CheckResult.correct()

        def test_common(self, output, attach):
            file_1 = f"test{os.sep}this_stage{os.sep}test_3.py"
            file_2 = f"test{os.sep}this_stage{os.sep}test_4.py"
            file_3 = f"test{os.sep}this_stage{os.sep}test_5.py"

            output = output.strip().lower().splitlines()

            if len(output) != 4:
                return CheckResult.wrong("It looks like there is an incorrect number of error messages. "
                                         f"Expected 4 lines, found {len(output)}")

            if file_1 not in output[0] or file_2 not in output[1] or file_3 not in output[2]:
                return CheckResult.wrong("Incorrect output format.\n"
                                         "Make sure that the files in the output are sorted "
                                         "according to the file name, line number, and issue code.")

            # negative tests
            for issue in output:
                if f"{file_1}: line 1: " in issue:
                    return CheckResult.wrong(FALSE_ALARM)
                if f"{file_1}: line 2: {error_code_default_argument_is_mutable}" in issue or \
                        f"{file_1}: line 6: {error_code_default_argument_is_mutable}" in issue or \
                        f"{file_1}: line 12: {error_code_default_argument_is_mutable}" in issue:
                    return CheckResult.wrong(FALSE_ALARM + "The program pointed correct function arguments as mutable.")

                if f"{file_2}: line 1: " in issue:
                    return CheckResult.wrong(FALSE_ALARM)
                if f"{file_2}: line 6: {error_code_arg_name}" in issue:
                    return CheckResult.wrong(FALSE_ALARM)
                if f"{file_2}: line 9: {error_code_arg_name}" in issue:
                    return CheckResult.wrong(FALSE_ALARM + "Default value of argument was None.")

                if f"{file_3}: line 1: " in issue:
                    return CheckResult.wrong(FALSE_ALARM)
                if f"{file_3}: line 6: {error_code_var_func_name}" in issue:
                    return CheckResult.wrong(FALSE_ALARM + "It was a part of the string - not a variable. ")
                if f"{file_3}: line 8: {error_code_var_func_name}" in issue:
                    return CheckResult.wrong(FALSE_ALARM + "The None keyword starts with a capital letter. ")

            # test_3 file
            if f"{file_1}: line 9: {error_code_default_argument_is_mutable}" not in output[0]:
                return CheckResult.wrong(MUTABLE_ARG)

            # test_4 file
            if f"{file_2}: line 2: {error_code_arg_name}" not in output[1]:
                return CheckResult.wrong(ARG_NAME)

            # test_5 file
            for i, j in enumerate([3, 9]):
                if f"{file_3}: line {j}: {error_code_var_func_name}" not in output[i+2]:
                    return CheckResult.wrong(VAR_FUNC_NAME)

            return CheckResult.correct()


    if __name__ == '__main__':
        AnalyzerTest("analyzer.code_analyzer").run_tests()
  learner_created: false
- name: analyzer/analyzer.py
  visible: true
  text: |
    import re


    def check_line_length(line_text: str):
        return len(line_text) > 79


    def check_indentation(line_text: str):
        return (len(line_text) - len(line_text.strip())) % 4 != 0


    def check_unnecessary_semicolon(line_text: str):
        return line_text.split("#")[0].strip().endswith(';')


    def check_spaces_before_inline_comments(line_text: str):
        line_text = line_text.lstrip()
        return not line_text.startswith("#") and '#' in line_text and not line_text.split("#")[0].endswith('  ')


    def check_todo(line_text: str):
        return '#' in line_text and 'todo' in line_text.split("#")[1].lower()


    def check_blank_lines_before(blank_lines: int):
        return blank_lines > 2


    def check_spaces_after_class(line_text: str):
        return re.match(r'class\s{2,}', line_text.strip())


    def check_spaces_after_def(line_text: str):
        return re.match(r'def\s{2,}', line_text.strip())


    def check_class_name_camel_case(line_text: str):
        return re.match(r'class\s+[a-z]', line_text.strip())


    def check_function_name_snake_case(line_text: str):
        return re.match(r'def\s+[A-Z]', line_text.strip())


    text_analyze_functions = {
        check_line_length: 'S001 Too long',
        check_indentation: 'S002 Indentation is not a multiple of four',
        check_unnecessary_semicolon: 'S003 Unnecessary semicolon',
        check_spaces_before_inline_comments: 'S004 At least two spaces required before inline comments',
        check_todo: 'S005 TODO found',
        check_spaces_after_class: "S007 Too many spaces after 'class'",
        check_spaces_after_def: "S007 Too many spaces after 'def'",
        check_class_name_camel_case: "S008 Class name should use CamelCase",
        check_function_name_snake_case: "S009 Function name should use snake_case"
    }


    def check_lines(code_lines: str, python_file: str):
        blank_lines = 0
        for line_number, line_text in enumerate(code_lines, start=1):
            if line_text:
                for func, message in text_analyze_functions.items():
                    if func(line_text):
                        print(f'{python_file}: Line {line_number}: {message}')
                if check_blank_lines_before(blank_lines):
                    print(f'{python_file}: Line {line_number}: S006 More than two blank lines used before this line')
                blank_lines = 0
            else:
                blank_lines += 1
  learner_created: true
- name: analyzer/utils.py
  visible: true
  text: |-
    from sys import argv
    from argument_error import ArgumentError
    import os


    def get_code_lines_list(path: str) -> list[str]:
        file_text: str = None
        while not file_text:
            try:
                with open(path, 'r') as checked_file:
                    file_text = checked_file.read()
                code_lines = file_text.splitlines()
                return code_lines
            except Exception as err:
                print(err)


    def get_path_arg():
        args = argv
        if len(args) > 1:
            return args[1]
        else:
            raise ArgumentError


    def get_python_files(directory_path):
        with os.scandir(directory_path) as entries:
            return [directory_path + '\\' + entry.name for entry in entries if entry.is_file() and entry.name.endswith('.py')]
  learner_created: true
- name: analyzer/argument_error.py
  visible: true
  text: |
    class ArgumentError(Exception):
        def __str__(self):
            return "Command line argument with directory isn't provided"
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/9907#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 08 Oct 2022 15:42:14 UTC
record: -1
